// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/auth/req_dh_params": {
            "post": {
                "description": "Request Diffie-Hellman parameters from server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Request DH Params",
                "parameters": [
                    {
                        "description": "Request Params",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ReqDHParamsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.ReqDHParamsResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/auth/req_pq": {
            "post": {
                "description": "Request PQ from server",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Auth"
                ],
                "summary": "Request PQ",
                "parameters": [
                    {
                        "description": "Request Params",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/auth.ReqPQRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/auth.ReqPQResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    }
                }
            }
        },
        "/biz/get_users": {
            "post": {
                "description": "Retrieves a list of users from the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get users",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/biz.GetUsersRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/biz.GetUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        },
        "/biz/get_users_with_sql_inject": {
            "post": {
                "description": "Retrieves a list of users from the database using a SQL injection vulnerable query",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get users with SQL injection vulnerability",
                "parameters": [
                    {
                        "description": "Request body",
                        "name": "req",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/biz.GetUsersWithSqlInjectRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/biz.GetUsersResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request"
                    },
                    "500": {
                        "description": "Internal Server Error"
                    }
                }
            }
        }
    },
    "definitions": {
        "auth.ReqDHParamsRequest": {
            "type": "object",
            "properties": {
                "a": {
                    "type": "string"
                },
                "messageId": {
                    "type": "integer"
                },
                "nonce": {
                    "type": "string"
                },
                "serverNonce": {
                    "type": "string"
                }
            }
        },
        "auth.ReqDHParamsResponse": {
            "type": "object",
            "properties": {
                "b": {
                    "type": "string"
                },
                "messageId": {
                    "type": "integer"
                },
                "nonce": {
                    "type": "string"
                },
                "serverNonce": {
                    "type": "string"
                }
            }
        },
        "auth.ReqPQRequest": {
            "type": "object",
            "properties": {
                "messageId": {
                    "type": "integer"
                },
                "nonce": {
                    "type": "string"
                }
            }
        },
        "auth.ReqPQResponse": {
            "type": "object",
            "properties": {
                "g": {
                    "type": "integer"
                },
                "messageId": {
                    "type": "integer"
                },
                "nonce": {
                    "type": "string"
                },
                "p": {
                    "type": "string"
                },
                "serverNonce": {
                    "type": "string"
                }
            }
        },
        "biz.GetUsersRequest": {
            "type": "object",
            "properties": {
                "authKey": {
                    "type": "string"
                },
                "messageId": {
                    "type": "integer"
                },
                "userId": {
                    "type": "integer"
                }
            }
        },
        "biz.GetUsersResponse": {
            "type": "object",
            "properties": {
                "messageId": {
                    "type": "integer"
                },
                "users": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/biz.User"
                    }
                }
            }
        },
        "biz.GetUsersWithSqlInjectRequest": {
            "type": "object",
            "properties": {
                "authKey": {
                    "type": "string"
                },
                "messageId": {
                    "type": "integer"
                },
                "userId": {
                    "type": "string"
                }
            }
        },
        "biz.Sex": {
            "type": "integer",
            "enum": [
                0,
                1
            ],
            "x-enum-varnames": [
                "Sex_Man",
                "Sex_Female"
            ]
        },
        "biz.User": {
            "type": "object",
            "properties": {
                "age": {
                    "type": "integer"
                },
                "createdAt": {
                    "type": "string"
                },
                "family": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "sex": {
                    "$ref": "#/definitions/biz.Sex"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
